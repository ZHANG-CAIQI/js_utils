class PageManager {
    constructor(textblock_dim, demo, check, doc_key, dropdown_buttons,
        dropdown_menu_keys, textblock_pool_min
    ) {
        this.demo = demo
        this.check = check
        this.doc_key = doc_key
        // dropdown buttons
        this.dropdown_buttons = dropdown_buttons
        this.dropdown_menu_keys = dropdown_menu_keys
        // dimensions for textblock divs
        this.textblock_pool_min = textblock_pool_min
        this.textblock_dim = textblock_dim;
        // counters for connections
        this.num_connections = 0
        this.start_line_id = null
        // counters for textblocks
        this.highlighted_counter = 0
        // z-index for dropdown needs to increase every click :/ maybe not the best implementation
        this.curr_dropdown_zindex = 3
    }
    //
    // generate HTML for a button div, keyed by the document id.
    // the button div is included in the text-div generated by highlight_text()
    //
    add_button_html(parent_div) {
        var curr_counter = this.highlighted_counter
        outer_div = document.createElement('div')
        $(outer_div).addClass("label main question")
            .attr('doc_id', this.doc_key)

        button_div = document.createElement('div')
        $(button_div).addClass("btn-group-md btn-group-toggle")
            .attr('role', 'group',)
            .attr('data-toggle', 'buttons')

        row_len = 4
        sub_button_div = document.createElement('div')
        $(sub_button_div).addClass('btn-group btn-group-justified')
        for (var i = 0; i < this.dropdown_buttons.length; i++) {
            tag = this.dropdown_buttons[i][0]
            button_type = this.dropdown_buttons[i][1]
            text = this.dropdown_buttons[i][2]
            // create the buttons.
            label = document.createElement('label')
            $(label).addClass("btn " + button_type + " btn-default").attr('label', tag)
            label.textContent = text

            // change colors of the textbox.
            $(label).on('click', function (d) {
                tag = $(this).attr('label')
                textblock = $(this).parents('.textblock')
                for (var j = 0; j < this.dropdown_buttons.length; j++) {
                    class_tag = 'subset-' + this.dropdown_buttons[j][0].toLowerCase()
                    textblock.removeClass(class_tag)
                    $('#highlighted-' + curr_counter).removeClass(class_tag)
                }
                textblock.addClass('subset-' + tag.toLowerCase())
                $('#highlighted-' + curr_counter).addClass('subset-' + tag.toLowerCase())
            })
            //
            input = document.createElement('input')
            $(input).attr('type', 'radio').attr('name', 'options').attr('autocomplete', 'off')
            //
            $(input).appendTo(label)
            $(sub_button_div).append(label)
            if (i > 0 && i % row_len == 0) {
                $(button_div).append(sub_button_div)
                sub_button_div = document.createElement('div')
                $(sub_button_div).addClass('btn-group btn-group-justified')
            }
        }
        $(button_div).append(sub_button_div)
        $(outer_div).append(button_div)
        // add button div to the outer div
        $(parent_div).append(outer_div)
    }

    //
    // Add a dropdown to the side of each span instead of buttons.
    //
    add_dropdown_html(parent_div, block_type) {
        var that = this
        var curr_counter = this.highlighted_counter

        // boilerplate setup
        var toggle_connector = document.createElement('button')
        $(toggle_connector).attr('type', 'button')
            .addClass('btn btn-danger dropdown-toggle dropdown-toggle-split')
            .attr('data-toggle', 'dropdown')
            .attr('aria-haspopup', 'true')
            .attr('aria-expanded', 'false')
            .on('click', function (e) {
                $(this).parent().css('z-index', that.curr_dropdown_zindex)
                that.curr_dropdown_zindex = that.curr_dropdown_zindex + 1
            })


        var inner_span = document.createElement('span')
        inner_span.textContent = 'Toggle Dropdown'
        $(inner_span).addClass('sr-only')
        $(toggle_connector).append(inner_span)
        $(parent_div).append(toggle_connector)

        //
        var dropdown_opt_div = document.createElement('div')
        $(dropdown_opt_div).addClass('dropdown-menu')
        $(dropdown_opt_div).addClass("label main question")
            .attr('doc_id', that.doc_key)

        for (var i = 0; i < that.dropdown_buttons.length; i++) {
            var tag = that.dropdown_buttons[i][0]
            var button_type = that.dropdown_buttons[i][1]
            var text = that.dropdown_buttons[i][2]

            // create the buttons.
            var label = document.createElement('a')
            $(label).addClass("dropdown-item").attr('label', tag)
            label.textContent = text

            if (block_type != null) {
                if (block_type == tag) {
                    $(label).addClass('active')
                }
            }

            // change colors of the textbox.
            $(label).on('click', function (d) {
                var tag = $(this).attr('label')
                $(this).parent().find('a').removeClass('active')
                $(this).addClass('active')
                // change textblock
                var textblock = $(this).parents('.textblock')
                $(textblock).attr('label', tag)
                for (var j = 0; j < that.dropdown_buttons.length; j++) {
                    var class_tag = 'subset-' + that.dropdown_buttons[j][0].toLowerCase()
                    textblock.removeClass(class_tag)
                    $('#highlighted-' + curr_counter).removeClass(class_tag)
                }
                // change color of span and of highlighted text
                textblock.addClass('subset-' + tag.toLowerCase())
                $('#highlighted-' + curr_counter)
                    .addClass('subset-' + tag.toLowerCase())
            }) 

            $(dropdown_opt_div).append(label)
        }
        $(parent_div).append(dropdown_opt_div)
    }

    // create a connection from input data (to re-create datapoints)
    create_static_connection(left_textblock, right_textblock, label) {
        var line_selector = '.line-' + this.num_connections
        $('#' + left_textblock).connections({
            to: '#' + right_textblock,
            class: 'connection line-' + this.num_connections
        })
        $(line_selector)
            .append('<span class="line-label">' + label + "</span>")
            .attr('left', left_textblock)
            .attr('right', right_textblock)
            .attr('doc_id', this.doc_key)
            .attr('label', label)
        this.num_connections++
        // make dropdown
        var left_label = $('#' + left_textblock).attr('label')
        var right_label = $('#' + right_textblock).attr('label')
        this.make_right_click_line_dropdown(line_selector, left_label, right_label)
    }

    //
    // handle the right-click dropdown for the line
    make_right_click_line_dropdown(line_selector, label_left, label_right) {
        var that = this
        var menu_options = {}
        var default_options = d3.values(this.dropdown_menu_keys)
            .map(function (d) { return d3.values(d) })
            .flat().flat()
            .remove_duplicates()
        var options = (this.dropdown_menu_keys[label_left] || {})[label_right] || default_options
        if (options.length == 1) {
            $(line_selector).find('.line-label').remove()
            $(line_selector).append('<span class="line-label">' + options[0] + "</span>")
        }
        else {
            options.forEach(function (d) { menu_options[d] = { 'name': d } })
            menu_options["sep1"] = "---------"
        }
        menu_options['remove'] = {
            name: "Remove",
            icon: function () {
                return 'context-menu-icon context-menu-icon-quit';
            }
        }

        // handle right-click event. (old: if person right-clicks on the line, remove it.)
        $.contextMenu({
            selector: line_selector,
            callback: function (key, options) {
                var this_line = this
                $(this_line).find('.line-label').remove()
                $(this_line).append('<span class="line-label">' + key + "</span>")
                $(this_line).addClass('line-type-' + key)
                $(this_line).attr('label', key)
                $(this_line).css('z-index', 0)
                if (key == 'remove') {
                    $(this_line).remove();
                }
            },
            items: menu_options,
            hide: function () {
                $(this).css('z-index', 0)
            }
        });

        $(line_selector).on('contextmenu', function (e) {
            $(this).css('z-index', that.curr_dropdown_zindex)
            that.curr_dropdown_zindex = that.curr_dropdown_zindex + 1
        })

        $(document).click(function () {
            $('.connection').css('z-index', 0)
        });
        $(document.body).on("contextmenu:hide", function (e) {
            $('.connection').css('z-index', 0)
        });
    }

    //
    handle_connection(this_div) {
        // e is the textblock's contextmenu event.
        var this_class = this
        var exists = $('.moving_line').length
        if (exists) {
            // close and make a connection
            // 1. remove floating arrow
            $('.moving_line').remove()
            // 2. make permanent arrow
            $(this_div).connections({
                to: '#' + this_class.start_line_id,
                class: 'connection line-' + this_class.num_connections
            })

            // make an arrow head
            var conn = $('.line-' + this_class.num_connections)
            // var offset = parseInt($(this_div).css('height')) / 2
            // var h = parseInt($(conn).css('height'))
            // var w = parseInt($(conn).css('width'))
            var i = document.createElement('i')
            $(i).addClass('arrow right')
              //  .css('left', w)
                //.css('top', h - offset)
            $(conn).append(i)

            // 3. make right-click dropdown menu
            var label_left = $('#' + this_class.start_line_id).attr('label')
            var label_right = $('#' + this_div.id).attr('label')
            var line_selector = '.line-' + this.num_connections
            var left_id = '#' + this_class.start_line_id
            var right_id = '#' + this_div.id
            this.make_right_click_line_dropdown(line_selector, label_left, label_right)

            // 4. bind data to the line
            $('.line-' + this_class.num_connections)
                .attr('left', this_class.start_line_id)
                .attr('right', this_div.id)
                .attr('doc_id', this_class.doc_key)

            $('.line-' + this_class.num_connections).mouseover(function(){
                    if ($(line_selector).attr('label') == "pre-condition"){

                        $(left_id).addClass('precondition-mouseover')
                        $(right_id).addClass('actionable-mouseover')
                    } else if ($(line_selector).attr('label') == "post-condition"){
                        $(left_id).addClass('actionable-mouseover')
                        $(right_id).addClass('postcondition-mouseover')
                    } 

            }).mouseout(function(){

                    if ($(line_selector).attr('label') == "pre-condition"){
                        $(left_id).removeClass('precondition-mouseover')
                        $(right_id).removeClass('actionable-mouseover')
                    } else if ($(line_selector).attr('label') == "post-condition"){
                        $(left_id).removeClass('actionable-mouseover')
                        $(right_id).removeClass('postcondition-mouseover')
                    } 
            })
            this.num_connections++;
        } else {
            // make a floating arrow.
            $(this_div).connections({
                to: '#moving_div',
                class: 'moving_line'
            })
            this.start_line_id = this_div.id
        }
    }

    highlight_text(element) {
        // get and update selection for text on the lefthand side
        // create span element
        var curr_counter = this.highlighted_counter
        var span_elem = document.createElement('span')
        $(span_elem).addClass('highlighted')
            .attr('id', 'highlighted-' + curr_counter)
        // get the text
        var [text_start, text_end, selection] = get_selection(element);
        if (text_start != text_end){
            var selected_text = selection.toString()
            var range = selection.getRangeAt(0)
            span_elem.appendChild(range.extractContents());
            range.insertNode(span_elem);
            console.log(text_start + ', ' + text_end)
            return [text_start, text_end, selected_text]
        }
        else {
            return [0, 0, ""]
        }

    }


    create_textblock(text_start, text_end, selected_text, block_type, block_id) {
        if (block_id != null) {
            this.highlighted_counter = parseInt(block_id.split('-')[1])
        }
        var curr_counter = this.highlighted_counter
        var that = this
        // create textblock element for the righthand side
        var textblock_pool = $('.textblock_pool').filter(
            function (d) { return $(d).attr('doc_id') == this.doc_key }
        )
        // create textblock div
        var textblock_div = document.createElement('div')
        $(textblock_div)
            .addClass('textblock')
            .attr('doc_id', that.doc_key)
            .attr('text_start', text_start)
            .attr('text_end', text_end)
        if ((that.demo || that.check) && block_type != null) {
            $(textblock_div).addClass('subset-' + block_type.toLowerCase())
            $(textblock_div).attr('id', block_id)
            $(textblock_div).attr('label', block_type)
        }
        else {
            $(textblock_div).attr('id', 'textblock-' + curr_counter)
        }

        $(textblock_div).css("position", "absolute")

        var textblock_span = document.createElement('span')
        $(textblock_span).addClass('textblock_span')
        textblock_span.textContent = selected_text
        // append elements to the textblock
        $(textblock_div).append(textblock_span)

        if (!this.demo) {
            // this.add_dropdown_html(textblock_div, block_type)
            // handle line-drawing
            $(textblock_div).bind('contextmenu', function (e) {
                e.preventDefault();
                that.handle_connection(this)
            })
        }
        // append textblock to the pool of textblocks
        var textblock = $(textblock_div).appendTo(textblock_pool)
        if (!this.demo) {
            var x = $('<button class="x">X</button>').appendTo(textblock)
            // handle X
            x.on('click', function () {
                block_id = textblock.attr('id').split('-')[1]
                textblock.remove()

                // remove base (yellow) highlight
                $('*#highlighted-' + block_id).removeClass('highlighted')
                $('*#highlighted-' + block_id).removeClass('text-mouseover')
                // console.log($('#highlighted-' + block_id))
                $('*#highlighted-' + block_id).each(function (i, d) {
                    var inner_html = $(d).html();
                    $(d).replaceWith(inner_html);//replace all span with just content
                })

                // remove all subclass highlights
                for (var j = 0; j < that.dropdown_buttons.length; j++) {
                    var class_tag = 'subset-' + that.dropdown_buttons[j][0].toLowerCase()
                    $('*#highlighted-' + curr_counter).removeClass(class_tag)
                }
            })
        }
        textblock.draggable(); // { revert: "invalid" });
        textblock.mouseover(function () {
            var block_id = this.id.split('-')[1]
            $("*#highlighted-" + block_id).addClass('text-mouseover')
        }).mouseout(function () {
            var block_id = this.id.split('-')[1]
            $("*#highlighted-" + block_id).removeClass('text-mouseover')
        })
        this.highlighted_counter++
        console.log("after_height", $(textblock_pool).css('height'))
        /*
        // dynamically resize the height of the textblock pool
        var new_height = d3.sum($('.textblock').map(function (i, d) {
            return $(d).height() + 2 * (
                that.textblock_dim.margin + that.textblock_dim.border + that.textblock_dim.padding) // 2 * (margin + border + padding)
        }))
        $(textblock_pool).css('height', d3.max([this.textblock_pool_min, new_height]))
        */
    }


    create_initial_textblock(text_start, text_end, selected_text, block_type, block_id) {
        if (block_id != null) {
            this.highlighted_counter = parseInt(block_id.split('-')[1])
        }
        var curr_counter = this.highlighted_counter
        var that = this
        // create textblock element for the righthand side
        var textblock_pool = $('.textblock_pool').filter(
            function (d) { return $(d).attr('doc_id') == this.doc_key }
        )
        // create textblock div
        var textblock_div = document.createElement('div')

        $(textblock_div)
            .addClass('textblock-hidden')
            .attr('doc_id', that.doc_key)
            .attr('text_start', text_start)
            .attr('text_end', text_end)
        if ((that.demo || that.check) && block_type != null) {
            $(textblock_div).addClass('subset-' + block_type.toLowerCase())
            $(textblock_div).attr('id', block_id)
            $(textblock_div).attr('label', block_type)
        }
        else {
            $(textblock_div).attr('id', 'textblock-' + curr_counter)
        }

        $(textblock_div).css("position", "absolute")

        var textblock_span = document.createElement('span')
        $(textblock_span).addClass('textblock_span')
        textblock_span.textContent = selected_text
        // append elements to the textblock
        $(textblock_div).append(textblock_span)

        if (!this.demo) {
            // this.add_dropdown_html(textblock_div, block_type)
            // handle line-drawing
            $(textblock_div).bind('contextmenu', function (e) {
                e.preventDefault();
                that.handle_connection(this)
            })
        }
        // append textblock to the pool of textblocks
        var textblock = $(textblock_div).appendTo(textblock_pool)
        if (!this.demo) {
            var x = $('<button class="x">X</button>').appendTo(textblock)
            // handle X
            x.on('click', function (e) {
                e.preventDefault()
                block_id = textblock.attr('id').split('-')[1]
                textblock.removeClass('textblock')
                textblock.addClass('textblock-hidden')
                $('*#highlighted-' + block_id).removeClass('highlighted')
                $('*#highlighted-' + block_id).addClass('pre-highlighted')
                $('*#highlighted-' + block_id).addClass('pre-highlighted')

            })
        }

        textblock.draggable(); // { revert: "invalid" });
        textblock.mouseover(function () {
            var block_id = this.id.split('-')[1]
            $("*#highlighted-" + block_id).addClass('text-mouseover')
        }).mouseout(function () {
            var block_id = this.id.split('-')[1]
            $("*#highlighted-" + block_id).removeClass('text-mouseover')
        })
        this.highlighted_counter++
        console.log("initial_height", $(textblock_pool).css('height'))

        /*
        // dynamically resize the height of the textblock pool
        var new_height = d3.sum($('.textblock').map(function (i, d) {
            return $(d).height() + 2 * (
                that.textblock_dim.margin + that.textblock_dim.border + that.textblock_dim.padding) // 2 * (margin + border + padding)
        }))
        $(textblock_pool).css('height', d3.max([this.textblock_pool_min, new_height]))
        */

    }

    //
    // Allow the user to highlight spans of text and create a function.
    //
    // params:
    // thisDiv: The class of the text-div that the user is highlighting
    // buttons: a set of optional buttons to include on the question div.

    handle_highlight(this_div, div_for_highlights) {
        var that = this
        $(this_div).on("mouseup", function () {
            if (!that.demo) {
                that.doc_key = $(this).attr('doc_id')
            }
            var [text_start, text_end, selection] = get_selection(this)
            var selected_text = selection.toString()
            if (selected_text.includes("\n")){
                alertify.alert(
                'Please do not select the subtitle! (e.g. Step 1)',
                function () { alertify.success(GENERIC_THANKS_MESSAGE); })
                .setHeader('<em>Selection error!</em>')
            }else{
                var [text_start, text_end, selected_text] = that.highlight_text(this)
                var [text_start, text_end] = [text_start, text_end].sort(function (a, b) { return a - b })
                if (text_end != text_start){
                    console.log(text_start, text_end, selected_text)
                    that.create_textblock(text_start, text_end, selected_text)
                }
            }
        });
    }
}
